SPL       ::= ( VarDecl | FunDecl )*
VarDecl   ::= ( 'var' | Type ) 'id'  '=' Exp ';'
FunDecl   ::= 'id' '(' [ FArgs ] ')' [ '::' FunType ] '{' VarDecl* Stmt* '}'
RetType   ::= Type
            | 'Void'
FunType   ::= Type* '->' RetType
Type      ::= BasicType
            | ( '(' Type ',' Type ')' )
            | ( '[' Type ']' )
            | 'id'
BasicType ::= 'Int'
            | 'Bool'
            | 'Char'
FArgs     ::= 'id' ( ',' 'id' )*
Stmt      ::= IfElse
            | For
            | While
            | StmtAss
            | ( FunCall ';' )
            | Return
StmtAss   ::= 'id' [ Field ] '=' Exp ';'
IfElse    ::= 'if' '(' Exp ')' '{' Stmt* '}' [ 'else' '{' Stmt* '}' ]
For       ::= 'for' 'id' 'in' Exp '{' Stmt* '}'
While     ::= 'while' '(' Exp ')' '{' Stmt* '}'
Return    ::= 'return' [ Exp ] ';'
Exp       ::= And [ Or' ]
Or'       ::= '||' And [ Or' ]
And       ::= Eq [ And' ]
And'      ::= '&&' Eq [ And' ]
Eq        ::= Leq [ Eq' ]
Eq'       ::= ( '==' | '!=' ) Leq [ Eq' ]
Leq       ::= Colon [ Leq' ]
Leq'      ::= ( '<' | '>' | '<=' | '>=' ) Colon [ Leq' ]
Colon     ::= Sum [ ':' Colon ]
Sum       ::= Fact [ Sum' ]
Sum'      ::= ( '+' | '-' ) Fact [ Sum' ]
Fact      ::= Unary [ Fact' ]
Fact'     ::= ( '*' | '/' | '%' ) Unary [ Fact' ]
Unary     ::= ( ( '!' | '-' ) Unary ) | Basic
Basic     ::= ( '(' Exp [ ',' Exp ] ')' ) | 'int' | 'char' | 'False' | 'True' | FunCall | ( '[' ']' ) | ListAbbr | ( 'id' [ Field ] )
ListAbbr  ::= '[' Exp '..' Exp ']'
Field     ::= ( '.hd' | '.tl' | '.fst' | '.snd' | Index )+
Index     ::= '[' Exp ']'
FunCall   ::= 'id' '(' [ ActArgs ] ')'
ActArgs   ::= Exp ( ',' Exp )*